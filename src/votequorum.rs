// libvotequorum interface for Rust
// Copyright (c) 2021 Red Hat, Inc.
//
// All rights reserved.
//
// Author: Christine Caulfield (ccaulfi@redhat.com)
//


// For the code generated by bindgen
extern crate rust_corosync_sys as ffi;

use std::os::raw::{c_void, c_int, c_char};
use std::slice;
use std::collections::HashMap;
use std::sync::Mutex;
use std::ffi::{CString};
use std::ptr::copy_nonoverlapping;
use std::fmt;

use crate::{CsError, DispatchFlags, TrackFlags, Result, NodeId};
use crate::cs_error_to_enum;


/// RingId returned by votequorum_notification_fn
pub struct RingId {
    pub nodeid: NodeId,
    pub seq: u64,
}

// Used to convert a VOTEQUORUM handle into one of ours
lazy_static! {
    static ref HANDLE_HASH: Mutex<HashMap<u64, Handle>> = Mutex::new(HashMap::new());
}

pub enum NodeState
{
    Member,
    Dead,
    Leaving,
    Unknown,
}
impl NodeState {
    pub fn new(state: u32) -> NodeState
    {
	match state {
	    1 => NodeState::Member,
	    2 => NodeState::Dead,
	    3 => NodeState::Leaving,
	    _ => NodeState::Unknown,
	}
    }
}
impl fmt::Debug for NodeState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
	match self {
	    NodeState::Member => write!(f, "Member"),
	    NodeState::Dead => write!(f, "Dead"),
	    NodeState::Leaving => write!(f, "Leaving"),
	    _  => write!(f, "Unknown"),
	}
    }
}

pub struct Node
{
    nodeid: NodeId,
    state: NodeState
}
impl fmt::Debug for Node {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
	write!(f, "nodeid: {}, state: {:?}", self.nodeid, self.state)
    }
}

// Flags in the NodeInfo striuct
// TODO: better way of doing this?
pub const VOTEQUORUM_INFO_TWONODE                  : u32 = 1;
pub const VOTEQUORUM_INFO_QUORATE                  : u32 = 2;
pub const VOTEQUORUM_INFO_WAIT_FOR_ALL             : u32 = 4;
pub const VOTEQUORUM_INFO_LAST_MAN_STANDING        : u32 = 8;
pub const VOTEQUORUM_INFO_AUTO_TIE_BREAKER         : u32 = 16;
pub const VOTEQUORUM_INFO_ALLOW_DOWNSCALE          : u32 = 32;
pub const VOTEQUORUM_INFO_QDEVICE_REGISTERED       : u32 = 64;
pub const VOTEQUORUM_INFO_QDEVICE_ALIVE            : u32 = 128;
pub const VOTEQUORUM_INFO_QDEVICE_CAST_VOTE        : u32 = 256;
pub const VOTEQUORUM_INFO_QDEVICE_MASTER_WINS      : u32 = 512;

pub struct NodeInfo
{
    pub node_id: NodeId,
    pub node_state: NodeState,
    pub node_votes: u32,
    pub node_expected_votes: u32,
    pub highest_expected: u32,
    pub quorum: u32,
    pub flags: u32,
    pub qdevice_votes: u32,
    pub qdevice_name: String,
}

// Turn a C nodeID list into a vec of NodeIds
fn list_to_vec(list_entries: u32, list: *const u32) -> Vec<NodeId>
{
    let mut r_member_list = Vec::<NodeId>::new();
    let temp_members: &[u32] = unsafe { slice::from_raw_parts(list, list_entries as usize) };
    for i in 0..list_entries as usize {
	r_member_list.push(NodeId::from(temp_members[i]));
    }
    r_member_list
}

// Called from votequorum callback function - munge params back to Rust from C
extern "C" fn rust_expectedvotes_notification_fn(
    handle: ffi::votequorum::votequorum_handle_t,
    context: u64,
    expected_votes: u32)
{
    match HANDLE_HASH.lock().unwrap().get(&handle) {
	Some(h) =>  {
	    (h.callbacks.expectedvotes_notification_fn)(h,
							context,
							expected_votes);
	}
	None => {}
    }
}

// Called from votequorum callback function - munge params back to Rust from C
extern "C" fn rust_quorum_notification_fn(
    handle: ffi::votequorum::votequorum_handle_t,
    context: u64,
    quorate: u32,
    node_list_entries: u32,
    node_list: *mut ffi::votequorum::votequorum_node_t)
{
    match HANDLE_HASH.lock().unwrap().get(&handle) {
	Some(h) =>  {
	    let r_quorate = match quorate {
		0 => false,
		1 => true,
		_ => false,
	    };
	    let mut r_node_list = Vec::<Node>::new();
	    let temp_members: &[ffi::votequorum::votequorum_node_t] =
		unsafe { slice::from_raw_parts(node_list, node_list_entries as usize) };
		for i in 0..node_list_entries as usize {
		    r_node_list.push(Node{nodeid: NodeId::from(temp_members[i].nodeid),
					  state: NodeState::new(temp_members[i].state)} );
		}

	    (h.callbacks.quorum_notification_fn)(h,
						 context,
						 r_quorate,
						 r_node_list);
	}
	None => {}
    }
}

// Called from votequorum callback function - munge params back to Rust from C
extern "C" fn rust_nodelist_notification_fn(
    handle: ffi::votequorum::votequorum_handle_t,
    context: u64,
    ring_id: ffi::votequorum::votequorum_ring_id_t,
    node_list_entries: u32,
    node_list: *mut u32)
{
    match HANDLE_HASH.lock().unwrap().get(&handle) {
	Some(h) =>  {
	    let r_ring_id = RingId{nodeid: NodeId::from(ring_id.nodeid),
				   seq: ring_id.seq};

	    let r_node_list = list_to_vec(node_list_entries, node_list);

	    (h.callbacks.nodelist_notification_fn)(h,
						   context,
						   r_ring_id,
						   r_node_list);
	}
	None => {}
    }
}

#[derive(Copy, Clone)]
pub struct Callbacks {
    pub quorum_notification_fn: fn(hande: &Handle,
				   context: u64,
				   quorate: bool,
				   node_list: Vec<Node>),
    pub nodelist_notification_fn: fn(hande: &Handle,
				     context: u64,
				     ring_id: RingId,
				     node_list: Vec<NodeId>),
    pub expectedvotes_notification_fn: fn(handle: &Handle,
					  context: u64,
					  expected_votes: u32),
}

// Our internal state
#[derive(Copy, Clone)]
pub struct Handle {
    votequorum_handle: u64,
    callbacks: Callbacks
}

/// Initialize a connection to the votequorum subsystem
/// model_data: The type of initialization, and callbacks
/// context:  arbitrary value returned in callbacks
/// Returns a handle into the votequorum library
pub fn initialize(callbacks: &Callbacks) -> Result<Handle>
{
    let mut handle: ffi::votequorum::votequorum_handle_t = 0;

    let mut c_callbacks = ffi::votequorum::votequorum_callbacks_t {
	votequorum_quorum_notify_fn: Some(rust_quorum_notification_fn),
	votequorum_nodelist_notify_fn: Some(rust_nodelist_notification_fn),
	votequorum_expectedvotes_notify_fn: Some(rust_expectedvotes_notification_fn),
    };

    unsafe {
	let res = ffi::votequorum::votequorum_initialize(&mut handle,
							 &mut c_callbacks);
	if res == ffi::votequorum::CS_OK {
	    let rhandle = Handle{votequorum_handle: handle, callbacks: callbacks.clone()};
	    HANDLE_HASH.lock().unwrap().insert(handle, rhandle);
	    Ok(rhandle)
	} else {
	    Err(cs_error_to_enum(res))
	}
    }
}


/// Finish with a connection to corosync
/// handle: a votequorum handle as returned from [initialize]
pub fn finalize(handle: Handle) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_finalize(handle.votequorum_handle)
	};
    if res == ffi::votequorum::CS_OK {
	HANDLE_HASH.lock().unwrap().remove(&handle.votequorum_handle);
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

// Not sure if an FD is the right thing to return here, but it will do for now.
/// Return a file descriptor to use for poll/select on the VOTEQUORUM handle
/// handle: votequorum handle from [initialize]
/// return: file descriptor
pub fn fd_get(handle: Handle) -> Result<i32>
{
    let c_fd: *mut c_int = &mut 0 as *mut _ as *mut c_int;
    let res =
	unsafe {
	    ffi::votequorum::votequorum_fd_get(handle.votequorum_handle, c_fd)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(c_fd as i32)
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Return information about a node
/// handle: votequorum handle from [initialize]
/// nodeid: node to get intomation about
/// return: [NodeInfo] for that node
pub fn get_info(handle: Handle, nodeid: NodeId) -> Result<NodeInfo>
{
    let mut c_info = ffi::votequorum::votequorum_info {
	node_id: 0,
	node_state:0,
	node_votes: 0,
	node_expected_votes:0,
	highest_expected:0,
	total_votes:0,
	quorum:0,
	flags:0,
	qdevice_votes:0,
	qdevice_name: [0; 255usize]
    };
    let res =
	unsafe {
	    ffi::votequorum::votequorum_getinfo(handle.votequorum_handle, u32::from(nodeid), &mut c_info)
	};

    if res == ffi::votequorum::CS_OK {
	let info = NodeInfo {
	    node_id : NodeId::from(c_info.node_id),
	    node_state : NodeState::new(c_info.node_state),
	    node_votes : c_info.node_votes,
	    node_expected_votes : c_info.node_expected_votes,
	    highest_expected : c_info.highest_expected,
	    quorum : c_info.quorum,
	    flags : c_info.flags,
	    qdevice_votes : c_info.qdevice_votes,
	    qdevice_name : match string_from_bytes(&c_info.qdevice_name) {
		Some(s) => s,
		None => String::new()
	    },
	};
	Ok(info)
    } else {
	Err(cs_error_to_enum(res))
    }
}

const VOTEQUORUM_QDEVICE_MAX_NAME_LEN : usize = 255;
fn string_from_bytes(bytes: &[c_char;VOTEQUORUM_QDEVICE_MAX_NAME_LEN]) -> Option<String>
{
    // Get length of the string in old-fashioned style
    let mut length: usize = 0;
    let mut count : usize = 0;
    for i in bytes {
	if *i == 0 && length == 0 {
	    length = count;
	}
	count += 1;
    }

    unsafe {
	// This is a bit of a messy way to get the string out of the internals of
	// cpg_iteration_description, but we need to fully copy it, not shallow copy it.
	let mut newbytes: [u8;VOTEQUORUM_QDEVICE_MAX_NAME_LEN] = [0;VOTEQUORUM_QDEVICE_MAX_NAME_LEN];

	// Messy casting on both parts of the copy here to get it to work on both signed
	// and unsigned char machines
	copy_nonoverlapping(bytes.as_ptr() as *mut i8, newbytes.as_mut_ptr() as *mut i8, length);
	let cs = match CString::new(&newbytes[0..length as usize]) {
	    Ok(c1) => c1,
	    Err(_) => return None,
	};
	match cs.into_string() {
	    Ok(s) => Some(s),
	    Err(_) => return None,
	}
    }
}


/// Display any/all active VOTEQUORUM callbacks
/// handle: a votequorum handle as returned from [initialize]
/// flags: [DispatchFlags]
pub fn dispatch(handle: Handle, flags: DispatchFlags) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_dispatch(handle.votequorum_handle, flags as u32)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Track node and votequorum changes
/// handle: a votequorum handle as returned from [initialize]
/// flags: [TrackFlags]
pub fn trackstart(handle: Handle, context: u64,flags: TrackFlags) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_trackstart(handle.votequorum_handle, context, flags as u32)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Stop tracking node and votequorum changes
/// handle: a votequorum handle as returned from [initialize]
pub fn trackstop(handle: Handle) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_trackstop(handle.votequorum_handle)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Get the current 'context' value for this handle
/// The context value is an arbitrary value that is always passed
/// back to callbacks to help identify the source
/// handle: a votequorum handle as returned from [initialize]
pub fn context_get(handle: Handle) -> Result<u64>
{
    let (res, context) =
	unsafe {
	    let mut c_context: *mut c_void = &mut 0u64 as *mut _ as *mut c_void;
	    let r = ffi::votequorum::votequorum_context_get(handle.votequorum_handle, &mut c_context);
	    let context: u64 = c_context as u64;
	    (r, context)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(context)
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Set the current 'context' value for this handle
/// The context value is an arbitrary value that is always passed
/// back to callbacks to help identify the source.
/// Normally this is set in [initialize], but this allows it to be changed
/// handle: a votequorum handle as returned from [initialize]
pub fn context_set(handle: Handle, context: u64) -> Result<()>
{
    let res =
	unsafe {
	    let c_context = context as *mut c_void;
	    ffi::votequorum::votequorum_context_set(handle.votequorum_handle, c_context)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}


/// Set the current expected_votes for the cluster
/// handle: a votequorum handle as returned from [initialize]
/// expected_votes: new value for ev
pub fn set_expected(handle: Handle, expected_votes: u32) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_setexpected(handle.votequorum_handle, expected_votes)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Set the current votes for a node
/// handle: a votequorum handle as returned from [initialize]
/// votes: new value for 'votes'
pub fn set_votes(handle: Handle, nodeid: NodeId, votes: u32) -> Result<()>
{
    let res =
	unsafe {
	    ffi::votequorum::votequorum_setvotes(handle.votequorum_handle, u32::from(nodeid), votes)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}


/// Register a quorum device
/// handle: a handle as returned from [initialize]
/// name: name of the device to register
pub fn qdevice_register(handle: Handle, name: &String) -> Result<()>
{
    let c_string = {
	match CString::new(name.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };

    let res =
	unsafe {
	    ffi::votequorum::votequorum_qdevice_register(handle.votequorum_handle, c_string. as_ptr())
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}


/// Unregister a quorum device
/// handle: a handle as returned from [initialize]
/// name: name of the device to unregister
pub fn qdevice_unregister(handle: Handle, name: &String) -> Result<()>
{
    let c_string = {
	match CString::new(name.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };

    let res =
	unsafe {
	    ffi::votequorum::votequorum_qdevice_unregister(handle.votequorum_handle, c_string. as_ptr())
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}

/// Update the name of a quorum device
/// handle: a handle as returned from [initialize]
/// oldname: name of the device to rename
/// newname: new name
pub fn qdevice_update(handle: Handle, oldname: &String, newname: &String) -> Result<()>
{
    let on_string = {
	match CString::new(oldname.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };
    let nn_string = {
	match CString::new(newname.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };

    let res =
	unsafe {
	    ffi::votequorum::votequorum_qdevice_update(handle.votequorum_handle, on_string.as_ptr(), nn_string.as_ptr())
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}


/// Poll a quorum device
/// handle: a handle as returned from [initialize]
/// name: name of the device to poll
/// cast_vote: Whether to cast a vote for the quorum device
/// ring_id: Ring_Id for this poll.. Must match the current cluster ring_id
pub fn qdevice_poll(handle: Handle, name: &String, cast_vote: bool, ring_id: &RingId) -> Result<()>
{
    let c_string = {
	match CString::new(name.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };

    let c_cast_vote : u32 = if cast_vote {1} else {0};
    let c_ring_id = ffi::votequorum::votequorum_ring_id_t {
	nodeid: u32::from(ring_id.nodeid),
	seq: ring_id.seq};

    let res =
	unsafe {
	    ffi::votequorum::votequorum_qdevice_poll(handle.votequorum_handle, c_string.as_ptr(), c_cast_vote, c_ring_id)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}


/// Allow qdevice to tell votequorum if master_wins can be enabled or not
/// handle: a handle as returned from [initialize]
/// name: name of the device
/// cast_vote: Whether to allow master_wins
pub fn qdevice_master_wins(handle: Handle, name: &String, master_wins: bool) -> Result<()>
{
    let c_string = {
	match CString::new(name.as_str()) {
	    Ok(cs) => cs,
	    Err(_) => return Err(CsError::CsErrInvalidParam),
	}
    };

    let c_master_wins : u32 = if master_wins {1} else {0};

    let res =
	unsafe {
	    ffi::votequorum::votequorum_qdevice_master_wins(handle.votequorum_handle, c_string.as_ptr(), c_master_wins)
	};
    if res == ffi::votequorum::CS_OK {
	Ok(())
    } else {
	Err(cs_error_to_enum(res))
    }
}
